load model % 我的数据
model = im2double(model); % 模型
[mRows,mCols,mDims] = size(model); % 模型尺寸
mCenter = ([mRows,mCols,mDims]+1)/2; % 模型中心(因为下标从1开始)
% 相机成像范围(默认等于尺寸中最大值)
cRows = max([mRows,mCols,mDims]);
cCols = max([mRows,mCols,mDims]);
cDims = max([mRows,mCols,mDims]);
% 相机成像分辨率（输出尺寸）
rRows = 200;
rCols = 200;
rDims = 100;
% 精度(采样间隔)
precison = ([cRows,cCols,cDims]-1)./([rRows,rCols,rDims]-1);
% 相机角度
alpha = 90;
beta = 90;
% 转为弧度
alpha = alpha/180*pi;
beta = beta/180*pi;
% 初始化网格
mesh.x = zeros(rRows,rCols,rDims);
mesh.y = zeros(rRows,rCols,rDims);
mesh.z = zeros(rRows,rCols,rDims);
% 计算网格
for d = 1:rDims
    for r = 1:rRows
        for c = 1:rCols
            % 赋初值
            x = 1+(r-1)*precison(1);
            y = 1+(c-1)*precison(2);
            z = 1+(d-1)*precison(3);
            % {中心旋转}
            % 移至原点
            x = x-mCenter(1);
            y = y-mCenter(2);
            z = z-mCenter(3);
            % x轴逆时针旋转
            tmp = [x,y,z]; % 避免旋转中覆盖原值
            y = tmp(2)*cos(alpha)-tmp(3)*sin(alpha);
            z = tmp(2)*sin(alpha)+tmp(3)*cos(alpha);
            % y轴逆时针旋转
            tmp = [x,y,z]; % 避免旋转中覆盖原值
            x = tmp(1)*cos(beta)+tmp(3)*sin(beta);
            z = -tmp(1)*sin(beta)+tmp(3)*cos(beta);
            % 移回中心
            mesh.x(r,c,d) = x+mCenter(1);
            mesh.y(r,c,d) = y+mCenter(2);
            mesh.z(r,c,d) = z+mCenter(3);
        end
    end
end
V = zeros(rRows,rCols,rDims);
% 注：为演示原理没有使用interp3()函数
for d = 1:rDims
    for r = 1:rRows
        for c = 1:rCols
            % 此处使用最近邻插值
            x = round(mesh.x(r,c,d));
            y = round(mesh.y(r,c,d));
            z = round(mesh.z(r,c,d));
            if x>=1&&x<=mRows && y>=1&&y<=mCols && z>=1&&z<=mDims
                V(r,c,d) = model(x,y,z);
            end
        end
    end
end
im = zeros(rRows,rCols);
for r = 1:rRows
    for c = 1:rCols
        rayline = V(r,c,:);
        im(r,c) = max(rayline);      
    end
end
imshow(im)